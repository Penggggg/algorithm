/**
 * 
 * @description
 * 
 * 题目：
 * 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
 * 
 * 输入: n = 12
   输出: 3 
   解释: 12 = 4 + 4 + 4

   输入: n = 13
   输出: 2
   解释: 13 = 4 + 9
 */


/**
 * 
 * @description
 * 
 * 思路：
 * 1维dp：表示数值n，所需的完全平方数最少个数
 * 
 * 拆解子问题：
 * N = 一个整数的平方X + 另一个整数Y；
 * 子问题：求另一个整数Y的最优平方解
 * 
 * 举例：
 * 12 = (1) + 11
   12 = (4) + 8
   12 = (9) + 3
   要得出3，8，11中谁的解最优，那么12的解就是它 + 1（自己也有一个平方)
 */

var numSquares = function( n ) {
    
    const dp = new Array( n + 1 ).fill( 0 );

    for ( let i = 1; i <= n; i++ ) { // 从子问题开始处理
        dp[ i ] = i; // 数i的最差解为i个1相加
        for ( let j = 1; i - j * j >= 0; j++ ) { // i - j * j，相当于找到另一个整数Y
            dp[ i ] = Math.min( 
                dp[ i ],  // 此数的上一个解
                dp[ i - j * j ] + 1 // 需要计算另一个整数Y
            )
        }
    }
    return dp[ n ]
};

console.log( numSquares( 12 ))